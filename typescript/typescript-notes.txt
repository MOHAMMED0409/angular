1. Datatype
    i. Number:
        let age: number;
    ii. String:
        let fname = 'Mohammed';
    iii. Boolean:
        let isValid:boolean;
            when we use this format in typescript it will through an error because no value is assigned to the variable "isValid".
        let isValid:boolean=false or true;
            always define values to variable in typescript.
    iv. Array:
        let emplist:string[];
        let deplist:Array<string>;
            Two ways to define the array in Typescript.
    v. enum:
        enum Color{
            red,
            blue,
            green
            }

        let g:Color = Color.green

        this Typescript will return a 3 to 4 line of javascript when compiled to redue the line of code in the javascript a type const is used.

        const enum Color{
            red,
            blue,
            green
        }

        let g:Color = Color.green
    
    vi. Tuples:
        let swapnum: [fnum:number,snum:number];
        function swapnumbers(num1:number,num2:number):[number,number]{
            return [num2,num1]
        }

        swapnum= swapnumbers(10,20);

        console.log(swapnum[0])
        In Tuples when we try to access the Index out of range it show the error before it is even compiled.
    
    vii. any:
        This will accept any Datatype.
        note: Don't use it in the codebase.

2. function
    i. Types of Function:
        a. Named Function
        b. Arrow Function
        c. Function Expression
    
    ii. Optional Parameters:
        We can pass optional parameters to the functions.
        for example:
            function add(num1: number, num2: number, num3?: number): number{
                return num3? num1+num2+num3 : num1+num2;
            };
        Here the "num3?" comes with a question mark which is a optional parameters in the function.
    
    iii. Required Parameters:
         Inside the function defination the values wil be assigned to parameters
         For Example:
            functuion add(num1:number , num2=20);
            In the above function the value for num2 is assigned in function define block.

    iv. Rest  Parameters:
        For Example:
            function add2(num1: number, num2 : number, ...num3:number[]) :number {
                return num1+num2+num3.reduce((a,b)=>a+b,0)
            };
            let numbers = [1,2,3,4,5]               
            console.log(add2(2,3,...numbers));
            We can pass a array of values to function as above syntax

    v. Generic Function:

3. Classes:
    Refer the code for better understanding
    Note: "#" is used in Classes for private variables.
    
